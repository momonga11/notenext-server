version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-ecs: circleci/aws-ecs@2.1.0
jobs:
  build_and_test:
    docker:
      - image: circleci/ruby:2.7.3
        environment:
          RAILS_ENV: test
          DATABASE_DEV_HOST: 127.0.0.1
          DATABASE_ROOT_PASSWORD: password
          SAMPLE_USER_PASSWORD: password
          TZ: Asia/Tokyo
      - image: circleci/mysql:8.0-ram
        environment:
          MYSQL_ROOT_PASSWORD: password
          TZ: Asia/Tokyo
        command: mysqld --default-authentication-plugin=mysql_native_password
    working_directory: ~/app
    steps:
      - checkout
      - restore_cache:
          keys:
            - rails-bundle-v3-{{ checksum "Gemfile.lock" }}
            - rails-bundle-v3-
      - run:
          name: 必要なパッケージのインストール
          command: |
            sudo apt-get update -qq \
              && sudo apt-get install -y --no-install-recommends default-mysql-client \
              && sudo apt-get clean \
              && sudo rm -rf /var/lib/apt/lists/*
      - run:
          name: bundle/configの設定
          command: bundle config set path 'vendor/bundle' && bundle config set deployment 'true'
      - run:
          name: gem依存関係のインストール
          command: bundle check || bundle install
      - save_cache:
          key: rails-bundle-v3-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: データベースの起動を待機
          command: |
            dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: データベースのセットアップ
          command: bundle exec rake db:setup
      - run:
          name: Lintツール(rubocop)を実行
          command: |
            bundle exec rubocop
      - run:
          name: テストを実行
          command: |
            bundle exec rspec
workflows:
  version: 2
  main:
    jobs:
      - build_and_test
      - aws-ecr/build-and-push-image:
          name: "build_and_push_image_app"
          repo: "notenext-app"
          tag: "${CIRCLE_SHA1}"
          extra-build-args: "--build-arg env=production"
          requires:
            - build_and_test
          filters:
            branches:
              only:
                - main
      - aws-ecr/build-and-push-image:
          name: "build_and_push_image_web"
          path: "./nginx"
          repo: "notenext-web"
          tag: "${CIRCLE_SHA1}"
          requires:
            - build_and_test
          filters:
            branches:
              only:
                - main
      - aws-ecs/deploy-service-update:
          cluster-name: "notenext-cluster"
          family: "notenext-api"
          service-name: "notenext-service"
          container-image-name-updates: "\
            container=notenext-app,image-and-tag=${AWS_ECR_ACCOUNT_URL}/notenext-app:${CIRCLE_SHA1},\
            container=notenext-web,image-and-tag=${AWS_ECR_ACCOUNT_URL}/notenext-web:${CIRCLE_SHA1}"
          requires:
            - build_and_push_image_app
            - build_and_push_image_web
          filters:
            branches:
              only:
                - main
